#!/bin/bash
set -e -x -o pipefail

# pipeline-low-coverage 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {
    echo "low-coverage-pipeline started on $(date) - chromosome: ${chr}"

    echo "Value of project: '$project'"
    echo "Value of run_convert_reference_module: '$run_convert_reference_module'"
    echo "Value of run_impute_module: '$run_impute_module'"
    echo "Value of app_pth: '$app_pth'"
    echo "Value of ref_bcf_pth: '$ref_bcf_pth'"
    echo "Value of ref_bin_pth: '$ref_bin_pth'"
    echo "Value of tar_bams_pth: '$tar_bams_pth'"
    echo "Value of map_pth: '$map_pth'"
    echo "Value of cnk_pth: '$cnk_pth'"
    echo "Value of out_pth: '$out_pth'"
    echo "Value of ref_pfx: '$ref_pfx'"
    echo "Value of ref_sfx: '$ref_sfx'"
    echo "Value of tar_pfx: '$tar_pfx'"
    echo "Value of tar_sfx: '$tar_sfx'"
    echo "Value of fasta_ref: '$fasta_ref'"
    echo "Value of fasta_idx: '$fasta_idx'"
    echo "Value of batch_id: '$batch_id'"
    echo "Value of chr: '$chr'"
    echo "Value of imp_arg: '$imp_arg'"
    echo "Value of mount_inputs: '$mount_inputs'"
    echo "Value of conversion_instance_type: '$conversion_instance_type'"
    echo "Value of imputation_instance_type: '$imputation_instance_type'"
    
    num_thr_bin=$(echo ${conversion_instance_type} | sed -n 's/.*_x\([0-9]*\).*/\1/p')    
    num_thr_imp=$(echo ${imputation_instance_type} | sed -n 's/.*_x\([0-9]*\).*/\1/p')    
    
    app_dir="${project}:/${app_pth}"
    ref_bcf_dir="${project}:/${ref_bcf_pth}"
    ref_bin_dir="${project}:/${ref_bin_pth}chr${chr}/"
    tar_bam_dir="${project}:/${tar_bams_pth}"
    cnk_dir="${project}:/${cnk_pth}"
    map_dir="${project}:/${map_pth}"
    out_dir="${project}:/${out_pth}${batch_id}/chr${chr}"
    cnc_dir="${project}:/${out_pth}${batch_id}/"
      
	dx download "${cnk_dir}chunks_chr${chr}.txt" -o chunks.txt
	
	if [ "$run_convert_reference_module" == "true" ]; then
	
		echo -e "\t* Launching bin coversions jobs..."
		
		while read line; do
			inp_reg=$(echo $line | awk '{ print $3; }')
			inp_reg_srt=$(echo ${inp_reg} | cut -d":" -f 2 | cut -d"-" -f1)
			inp_reg_end=$(echo ${inp_reg} | cut -d":" -f 2 | cut -d"-" -f2)
			
			out_reg=$(echo $line | awk '{ print $4; }')
			out_reg_srt=$(echo ${out_reg} | cut -d":" -f 2 | cut -d"-" -f1)
			out_reg_end=$(echo ${out_reg} | cut -d":" -f 2 | cut -d"-" -f2)
		
			cnk_num=$(echo $line | awk '{ print $1; }')
			cnk_num=$(printf %03d $cnk_num)
				
			if [ "$run_convert_reference_module" == "true" ]; then
				#	1. create ref panel in bin
				dx run ${app_dir}split_reference \
				-y \
				--wait \
				--brief \
				--instance-type ${conversion_instance_type} \
				--detach \
				--priority low \
				--name "convert_ref_chr${chr}_${cnk_num}" \
				--destination "${ref_bin_dir}" \
				-i "inp_bcf=${ref_bcf_dir}${ref_pfx}${chr}${ref_sfx}.bcf" \
				-i "inp_idx=${ref_bcf_dir}${ref_pfx}${chr}${ref_sfx}.bcf.csi" \
				-i "map=${map_dir}chr${chr}.b38.gmap.gz" \
				-i "inp_reg=${inp_reg}" \
				-i "out_reg=${out_reg}" \
				-i "out_pfx=rp" \
				-i "maf_thr=0.001" \
				-i "num_thr=${num_thr_bin}" \
				-i "mount_inputs=${mount_inputs}" &
			fi
	   	done < chunks.txt
	    
		echo -e "\t* bin conversion jobs launched successfully."	
	fi

	if [ "$run_impute_module" == "true" ]; then	
		if [ "$run_convert_reference_module" == "true" ]; then
			echo -e "\t* Waiting for jobs to finish before starting imputation..."
			wait
			echo -e "\t* Jobs finished."
		fi
		
		echo -e "\t* Launching imputation jobs..."
		
		#3.1 imputation
		dep_str=""
		job_id=""
		
		while read line; do
			inp_reg=$(echo $line | awk '{ print $3; }')
			inp_reg_srt=$(echo ${inp_reg} | cut -d":" -f 2 | cut -d"-" -f1)
			inp_reg_end=$(echo ${inp_reg} | cut -d":" -f 2 | cut -d"-" -f2)
			
			out_reg=$(echo $line | awk '{ print $4; }')
			out_reg_srt=$(echo ${out_reg} | cut -d":" -f 2 | cut -d"-" -f1)
			out_reg_end=$(echo ${out_reg} | cut -d":" -f 2 | cut -d"-" -f2)
		
			cnk_num=$(echo $line | awk '{ print $1; }')
			cnk_num=$(printf %03d $cnk_num)
			
			project=$(echo $out_dir | cut -d":" -f1)	
			
			#3.1 imputation
			job_id=$( \
				dx run ${app_dir}glimpse2_phase \
		   		-y \
				--brief \
				--instance-type="${imputation_instance_type}" \
				--detach \
				--ignore-reuse \
				--priority="low" \
				--name="glimpse2_chr${chr}_${cnk_num}_${batch_id}" \
				--destination="${out_dir}" \
				-i "ref_bin=${ref_bin_dir}rp_chr${chr}_${inp_reg_srt}_${inp_reg_end}.bin" \
				-i "tar_bams=${tar_bam_dir}${tar_bcf_dir}${tar_pfx}chr${chr}${tar_sfx}" \
				-i "fasta_ref=${project}:${fasta_ref}" \
				-i "fasta_idx=${project}:${fasta_idx}" \
				-i "out_pfx=imputed_chr${chr}_${cnk_num}" \
				-i "num_thr=${num_thr_imp}" \
				-i "imp_arg=${imp_arg}" \
				-i "mount_inputs=${mount_inputs}" )
				
			if [ ! -z "$job_id" ]; then
				dep_str+="-d ${job_id} "
			fi	
		done < chunks.txt 
		
		dx run ${app_dir}ligate \
			-y \
			--brief \
			--detach \
			--ignore-reuse \
			--priority="low" \
			--instance-type="${imputation_instance_type}" \
			--name "ligate_chr${chr}_${batch_id}" \
			--destination "${cnc_dir}" \
			-i "inp_pfx=${out_pth}${batch_id}/chr${chr}/imputed_chr${chr}" \
			-i "out_pfx=imputed_chr${chr}" \
			-i "num_thr=${num_thr_imp}" \
			${dep_str}
		##3.2 concat
		#dx run swiss-army-knife \
		#	-y \
		#	--brief \
		#	--detach \
		#	--priority="low" \
		#	--instance-type="${imputation_instance_type}" \
		#	--name "concat_module_chr${chr}_${batch_id}" \
		#	--destination "${cnc_dir}" \
		#	-i "cmd=ls -1v /mnt/project/${out_pth}${batch_id}/chr${chr}/imputed_chr${chr}*.bcf > list.txt && bcftools concat -n -f list.txt --threads ${num_thr_imp} -Ob -o imputed_chr${chr}.bcf && bcftools index -f imputed_chr${chr}.bcf --threads ${num_thr_imp} && rm -f list.txt" \
		#	${dep_str}
			
		echo -e "\t* Imputation jobs launched successfully."
	fi		
}
